image:
  name: ${TF_CONTAINER_IMAGE}

stages:
  - generate-secrets
  - validate
  - plan
  - deploy

# REQUIRED - for child pipeline
workflow:
  rules:
    - when: always

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/
    - deploy/.creds/

generate-secrets:
  image: bash:latest
  stage: generate-secrets
  script:
    - apk update && apk add openssh-client
    - mkdir deploy/.creds && cd deploy/.creds
    - echo $SA_GCP | base64 -d > gcloud_sa_compute_admin.json && echo "Service account successfully decoded"
    - ssh-keygen -f vm_key -q -t rsa -N "" && echo "Keys successfully generated"
    - pwd
    - ls deploy/.creds

terraform:fmt:
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true

terraform:validate:
  stage: validate
  script:
    - pwd
    - ls deploy/.creds
    - gitlab-terraform validate

terraform:plan:
  stage: plan
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere.
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    # public: false
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform:deploy:
  stage: deploy
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  # when: manual
  # artifacts:
  #   name: vm_ip
  #   expire_in: "1 hour"
  #   paths:
  #     - '../.creds/vm_ip'

# ansible:
#   # image: python:3.9.17-slim-bullseye
#   image: alpine/ansible:latest
#   stage: ansible
#   # allow_failure: true
#   script:
#     - chmod 750 ansible_files
#     - cd deploy/ansible
#     - ansible --version
#     - ansible-playbook install_nginx.yml
