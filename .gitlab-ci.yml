image:
  name: "registry.gitlab.com/gitlab-org/terraform-images/branches/v1-8-0-1.5:f61b9582b11027bd80fb52ce44d266dc1d75e2dd"

stages:
  - gen_keys
  - validate
  - build
  - deploy
  - cleanup
  # - tf_plan
  # - tf_apply
  # - ans_config
  # - tf_destroy

variables:
  # ENVIRONMENT: "prod"
  # TF_ADDRESS: https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/terraform/state/votingly-tf
  TF_ROOT: ${CI_PROJECT_DIR}/deploy/prod  # The relative path to the root directory of the Terraform project
  TF_STATE_NAME: default      # The name of the state file used by the GitLab Managed Terraform state backend

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

.gen_keys:
  image: bash:latest
  stage: gen_keys
  script:
    - apk update && apk add openssh-client
    - mkdir deploy/.creds && cd deploy/.creds
    - echo $SA_GCP | base64 -d > gcloud_sa_compute_admin.json && echo "Service account successfully decoded"
    - ssh-keygen -f vm_key -q -t rsa -N "" && echo "Keys successfully generated"
  artifacts:
    name: keys
    public: false
    expire_in: "1 day"
    paths:
      - deploy/.creds

.terraform:fmt:
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true

.terraform:validate:
  stage: validate
  script:
    - gitlab-terraform validate

terraform:build:
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere.
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    # public: false
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform:deploy:
  stage: deploy
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  # when: manual

terraform:destroy:
  stage: cleanup
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
